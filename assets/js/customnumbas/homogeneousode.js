Numbas.queueScript('settings',[],function() {
    Numbas.custom_part_types = {};

    Numbas.rawxml = {
        templates: {
            question: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\nCopyright 2011-16 Newcastle University\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n-->\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n    <xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" indent=\"yes\" media-type=\"text/xhtml\" omit-xml-declaration=\"yes\"/>\n    <xsl:strip-space elements=\"p\"/>\n    <xsl:template match=\"question\">\n        <div class=\"question clearfix\" data-bind=\"with: question, visible: question.isCurrentQuestion\">\n            <form autocomplete=\"nope\">\n                <span style=\"display:none\">\\( \\begingroup \\)</span>\n                <h3 data-bind=\"text: displayName\" class=\"print-only\"></h3>\n                <xsl:apply-templates />\n                <span style=\"display: none\">\\( \\endgroup \\)</span>\n            </form>\n        </div>\n    </xsl:template>\n    <xsl:template match=\"properties|feedbacksettings|preview|notes|variables|preprocessing|preambles\" />\n    <xsl:template match=\"content\">\n        <xsl:apply-templates select=\"*\" mode=\"content\" />\n    </xsl:template>\n    <xsl:template match=\"@*|node()\" mode=\"content\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"@*|node()\" mode=\"content\" />\n        </xsl:copy>\n    </xsl:template>\n    \n<xsl:template match=\"statement\">\n    <div class=\"statement content-area\" localise-data-jme-context-description=\"question.statement\">\n        <xsl:apply-templates />\n    </div>\n</xsl:template>\n\n    \n<xsl:template match=\"parts\">\n    <div class=\"parts\">\n        <xsl:apply-templates />\n    </div>\n</xsl:template>\n<xsl:template match=\"part\" mode=\"path\">\n    <xsl:choose>\n        <xsl:when test=\"parent::gaps\">\n            <xsl:apply-templates select=\"../..\" mode=\"path\" />\n            <xsl:text>g</xsl:text>\n        </xsl:when>\n        <xsl:when test=\"parent::steps\">\n            <xsl:apply-templates select=\"../..\" mode=\"path\" />\n            <xsl:text>s</xsl:text>\n        </xsl:when>\n        <xsl:when test=\"parent::parts\">\n            <xsl:text>p</xsl:text>\n        </xsl:when>\n    </xsl:choose>\n    <xsl:value-of select=\"count(preceding-sibling::part)\" />\n</xsl:template>\n<xsl:template match=\"part\">\n    <xsl:variable name=\"path\">\n        <xsl:apply-templates select=\".\" mode=\"path\"/>\n    </xsl:variable>\n    <xsl:variable name=\"inline\">\n        <xsl:choose>\n            <xsl:when test=\"ancestor::gaps and @type='1_n_2' and choices/@displaytype='dropdownlist'\"><xsl:text>true</xsl:text></xsl:when>\n            <xsl:when test=\"ancestor::gaps and not (choices)\"><xsl:text>true</xsl:text></xsl:when>\n            <xsl:otherwise></xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"tag\">\n        <xsl:choose>\n            <xsl:when test=\"$inline='true'\">span</xsl:when>\n            <xsl:otherwise>div</xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"clear\">\n        <xsl:choose>\n            <xsl:when test=\"ancestor::gaps\"></xsl:when>\n            <xsl:otherwise><xsl:text>clearfix</xsl:text></xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"block\">\n        <xsl:choose>\n        <xsl:when test=\"@type='m_n_2' or @type='m_n_x'\"><xsl:text> block</xsl:text></xsl:when>\n            <xsl:when test=\"@type='1_n_2' and @displaytype='radiogroup'\"><xsl:text> block</xsl:text></xsl:when>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:if test=\"parent::parts\">\n        <xsl:if test=\"count(../part) &gt; 1\">\n            <h4 class=\"partheader\"><xsl:number count=\"part\" format=\"a) \"/></h4>\n        </xsl:if>\n    </xsl:if>\n    <xsl:element name=\"{$tag}\">\n        <xsl:attribute name=\"class\">part <xsl:value-of select=\"$clear\"/> type-<xsl:value-of select=\"@type\"/> <xsl:value-of select=\"$block\"/><xsl:if test=\"parent::steps\"> step</xsl:if><xsl:if test=\"parent::gaps\"> gap</xsl:if></xsl:attribute>\n        <xsl:attribute name=\"data-bind\">with: question.display.getPart('<xsl:value-of select=\"$path\" />'), css: {dirty: question.display.getPart('<xsl:value-of select=\"$path\" />').isDirty}</xsl:attribute>\n        <xsl:attribute name=\"data-part-path\"><xsl:value-of select=\"$path\" /></xsl:attribute>\n        <xsl:attribute name=\"data-jme-context-description\"><xsl:value-of select=\"@jme-context-description\" /></xsl:attribute>\n        <xsl:if test=\"not(ancestor::gaps)\">\n            <xsl:apply-templates select=\"prompt\" />\n        </xsl:if>\n        <xsl:if test=\"count(steps/part)>0\">\n            <xsl:apply-templates select=\"steps\"/>\n        </xsl:if>\n        <span class=\"student-answer\">\n            <xsl:attribute name=\"data-bind\">css: {answered: scoreFeedback.answered}, attr: {\"feedback-state\": scoreFeedback.state}</xsl:attribute>\n            <xsl:apply-templates select=\".\" mode=\"typespecific\"/>\n            <span class=\"warning-icon icon-exclamation-sign\" data-bind=\"visible: warnings().length>0, hover: warningsShown, event: {{focus: showWarnings, blur: hideWarnings}}\" tabindex=\"0\"></span>\n            <span class=\"warnings alert alert-danger\" data-bind=\"foreach: warnings, visible: warningsShown\">\n                <span class=\"warning\" data-bind=\"latex: message\"></span>\n            </span>\n        </span>\n        <xsl:apply-templates select=\".\" mode=\"correctanswer\"/>\n        <xsl:if test=\"not(ancestor::gaps)\">\n            <div class=\"submit-and-feedback\">\n                <button class=\"btn btn-primary submitPart\" data-bind=\"visible: showSubmitPart, click: controls.submit\"><localise>question.submit part</localise></button>\n                <div class=\"feedbackMessages\" data-bind=\"visible: feedbackMessages().length>0\" localise-data-jme-context-description=\"part.feedback\">\n                    <p class=\"out-of-date-message\" data-bind=\"visible: isDirty\"><localise>part.feedback out of date</localise></p>\n                    <ol data-bind=\"visible: showFeedbackMessages, foreach: feedbackMessages\">\n                        <li class=\"feedbackMessage\" data-bind=\"attr: {{'data-credit-change': credit_change}}\"><span data-bind=\"visible: $parent.showFeedbackIcon, css: 'feedback-icon '+icon\"></span> <span data-bind=\"latex: message\"></span></li>\n                    </ol>\n                </div>\n                <div class=\"partFeedback\" data-bind=\"visible: showFeedbackBox\">\n                    <div class=\"marks\" data-bind=\"pulse: scoreFeedback.update, visible: showMarks()\">\n                        <span class=\"score\" data-bind=\"html: scoreFeedback.message\"></span>\n                        <span class=\"feedback-icon\" data-bind=\"visible: scoreFeedback.iconClass, css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n                    </div>\n                    <small class=\"answered-state\" data-bind=\"html: scoreFeedback.answeredString\"></small>\n                </div>\n            </div>\n        </xsl:if>\n    </xsl:element>\n</xsl:template>\n<xsl:template match=\"part\" mode=\"typespecific\">\n    <localise>question.unsupported part type</localise> <xsl:text> </xsl:text> <xsl:value-of select=\"@type\"/>\n</xsl:template>\n<xsl:template match=\"part\" mode=\"correctanswer\">\n</xsl:template>\n\n    \n<xsl:template match=\"steps\">\n    <div class=\"steps well clearfix\" data-bind=\"slideVisible: stepsOpen\">\n        <xsl:apply-templates select=\"part\"/>\n    </div>\n    <div class=\"stepsBtn\">\n        <button class=\"btn btn-primary\" data-bind=\"visible: !stepsOpen(), click: controls.showSteps\"><localise>question.show steps</localise></button>\n        <button class=\"btn btn-primary\" data-bind=\"visible: stepsOpen(), click: controls.hideSteps\"><localise>question.hide steps</localise></button>\n        <span class=\"help-block hint penaltyMessage\">(<span data-bind=\"html: stepsPenaltyMessage\"></span>)</span>\n    </div>\n</xsl:template>\n\n    \n<xsl:template match=\"prompt\">\n    <span class=\"prompt content-area\" localise-data-jme-context-description=\"part.prompt\">\n        <xsl:apply-templates />\n    </span>\n</xsl:template>\n\n    \n<xsl:template match=\"advice\">\n    <div class=\"adviceContainer\" data-bind=\"visible: adviceDisplayed\" localise-data-jme-context-description=\"question.advice\">\n        <h3><localise>question.advice</localise></h3>\n        <span class=\"adviceDisplay content-area\">\n            <xsl:apply-templates />\n        </span>\n    </div>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='1_n_2']\" mode=\"typespecific\">\n    <xsl:apply-templates select=\"choices\" mode=\"one\"/>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@type='1_n_2']\" mode=\"correctanswer\">\n    <span class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <xsl:apply-templates select=\"choices\" mode=\"correctanswer\"/>\n    </span>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='m_n_2']\" mode=\"typespecific\">\n    <xsl:apply-templates select=\"choices\" mode=\"one\"/>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@type='m_n_2']\" mode=\"correctanswer\">\n    <div class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <xsl:apply-templates select=\"choices\" mode=\"correctanswer\"/>\n    </div>\n</xsl:template>\n\n    \n<xsl:template match=\"choices\" mode=\"one\">\n    <xsl:variable name=\"displaytype\"><xsl:value-of select=\"@displaytype\"/></xsl:variable>\n    <span localise-data-jme-context-description=\"part.mcq.choices\">\n    <xsl:choose>\n        <xsl:when test=\"@displaytype='radiogroup'\">\n            <ul class=\"multiplechoice clearfix\" data-bind=\"reorder_list: {{order: part.shuffleAnswers}}\">\n                <xsl:apply-templates select=\"choice\" mode=\"radiogroup\"/>\n            </ul>\n        </xsl:when>\n        <xsl:when test=\"@displaytype='checkbox'\">\n            <ul class=\"multiplechoice clearfix\" data-bind=\"reorder_list: {{order: part.shuffleAnswers}}\">\n                <xsl:apply-templates select=\"choice\" mode=\"checkbox\"/>\n            </ul>\n        </xsl:when>\n        <xsl:when test=\"@displaytype='dropdownlist'\">\n            <select class=\"multiplechoice\" data-bind=\"value: studentAnswer, disable: revealed, reorder_list: {{order: part.shuffleAnswers, leaders: 1}}\">\n                <option value=\"\"></option>\n                <xsl:apply-templates select=\"choice\" mode=\"dropdownlist\"/>\n            </select>\n        </xsl:when>\n    </xsl:choose>\n    </span>\n</xsl:template>\n<xsl:template match=\"choices\" mode=\"correctanswer\">\n    <xsl:variable name=\"displaytype\"><xsl:value-of select=\"@displaytype\"/></xsl:variable>\n    <span>\n    <xsl:choose>\n        <xsl:when test=\"@displaytype='radiogroup'\">\n            <ul class=\"multiplechoice clearfix\" data-bind=\"reorder_list: {{order: part.shuffleAnswers}}\">\n                <xsl:apply-templates select=\"choice\" mode=\"radiogroup-correctanswer\"/>\n            </ul>\n        </xsl:when>\n        <xsl:when test=\"@displaytype='checkbox'\">\n            <ul class=\"multiplechoice clearfix\" data-bind=\"reorder_list: {{order: part.shuffleAnswers}}\">\n                <xsl:apply-templates select=\"choice\" mode=\"checkbox-correctanswer\"/>\n            </ul>\n        </xsl:when>\n        <xsl:when test=\"@displaytype='dropdownlist'\">\n            <select class=\"multiplechoice\" data-bind=\"value: correctAnswer, reorder_list: {{order: part.shuffleAnswers, leaders: 1}}\" disabled=\"true\">\n                <option value=\"\"></option>\n                <xsl:apply-templates select=\"choice\" mode=\"dropdownlist-correctanswer\"/>\n            </select>\n        </xsl:when>\n    </xsl:choose>\n    </span>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"radiogroup\">\n    <xsl:variable name=\"path\">\n        <xsl:apply-templates select=\"../..\" mode=\"path\"/>\n    </xsl:variable>\n    <xsl:variable name=\"cols\" select=\"../@displaycolumns\"/>\n    <xsl:variable name=\"choicenum\"><xsl:value-of select=\"count(preceding-sibling::choice)\"/></xsl:variable>\n    <li>\n        <xsl:attribute name=\"class\">\n            <xsl:if test=\"($choicenum mod $cols = 0) and ($cols>0)\">\n                <xsl:text>start-column</xsl:text>\n            </xsl:if>\n        </xsl:attribute>\n        <xsl:attribute name=\"data-bind\">css: {checked: studentAnswer()==<xsl:value-of select=\"$choicenum\"/>, correct: studentAnswer()==<xsl:value-of select=\"$choicenum\"/> &amp;&amp; correctAnswer()==<xsl:value-of select=\"$choicenum\"/>}</xsl:attribute>\n        <label>\n            <input type=\"radio\" class=\"choice\" name=\"{$path}-choice\" data-bind=\"checked: studentAnswer, disable: revealed\" value=\"{$choicenum}\"/>\n            <xsl:apply-templates select=\"content\"/>\n        </label>\n    </li>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"radiogroup-correctanswer\">\n    <xsl:variable name=\"path\">\n        <xsl:apply-templates select=\"../..\" mode=\"path\"/>\n    </xsl:variable>\n    <xsl:variable name=\"cols\" select=\"../@displaycolumns\"/>\n    <xsl:variable name=\"choicenum\"><xsl:value-of select=\"count(preceding-sibling::choice)\"/></xsl:variable>\n    <li>\n        <xsl:attribute name=\"class\">\n            <xsl:if test=\"($choicenum mod $cols = 0) and ($cols>0)\">\n                <xsl:text>start-column</xsl:text>\n            </xsl:if>\n        </xsl:attribute>\n        <label>\n            <input type=\"radio\" class=\"choice\" name=\"{$path}-choice-correctanswer\" data-bind=\"checked: correctAnswer()+''\" disabled=\"true\" value=\"{$choicenum}\"/>\n            <xsl:apply-templates select=\"content\"/>\n        </label>\n    </li>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"checkbox\">\n    <xsl:variable name=\"cols\" select=\"../@displaycolumns\"/>\n    <xsl:variable name=\"choicenum\"><xsl:value-of select=\"count(preceding-sibling::choice)\"/></xsl:variable>\n    <li>\n        <xsl:attribute name=\"class\">\n            <xsl:if test=\"($choicenum mod $cols = 0) and ($cols>0)\">\n                <xsl:text>start-column</xsl:text>\n            </xsl:if>\n        </xsl:attribute>\n        <xsl:attribute name=\"data-bind\">css: {checked: ticks[<xsl:value-of select=\"$choicenum\"/>], correct: ticks[<xsl:value-of select=\"$choicenum\"/>] &amp;&amp; correctTicks[<xsl:value-of select=\"$choicenum\"/>]}</xsl:attribute>\n        <label>\n            <input type=\"checkbox\" class=\"choice\" name=\"choice\" data-bind=\"checked: ticks[{$choicenum}], disable: revealed\" />\n            <xsl:apply-templates select=\"content\"/>\n        </label>\n    </li>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"checkbox-correctanswer\">\n    <xsl:variable name=\"cols\" select=\"../@displaycolumns\"/>\n    <xsl:variable name=\"choicenum\"><xsl:value-of select=\"count(preceding-sibling::choice)\"/></xsl:variable>\n    <li>\n        <xsl:attribute name=\"class\">\n            <xsl:if test=\"($choicenum mod $cols = 0) and ($cols>0)\">\n                <xsl:text>start-column</xsl:text>\n            </xsl:if>\n        </xsl:attribute>\n        <label>\n            <input type=\"checkbox\" class=\"choice\" name=\"choice\" data-bind=\"checked: correctTicks[{$choicenum}]\" disabled=\"true\" />\n            <xsl:apply-templates select=\"content\"/>\n        </label>\n    </li>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"dropdownlist\">\n    <xsl:variable name=\"choicenum\"><xsl:value-of select=\"count(preceding-sibling::choice)\"/></xsl:variable>\n    <option value=\"{$choicenum}\">\n        <xsl:apply-templates select=\"content\"/>\n    </option>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"dropdownlist-correctanswer\">\n    <xsl:variable name=\"choicenum\"><xsl:value-of select=\"count(preceding-sibling::choice)\"/></xsl:variable>\n    <option value=\"{$choicenum}\">\n        <xsl:apply-templates select=\"content\"/>\n    </option>\n</xsl:template>\n<xsl:template match=\"distractor\">\n    <span><xsl:apply-templates /></span>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='m_n_x']\" mode=\"typespecific\">\n    <xsl:variable name=\"displaytype\" select=\"choices/@displaytype\"/>\n    <form autocomplete=\"nope\">\n        <table class=\"choices-grid\" data-bind=\"reorder_table: {{rows: part.shuffleChoices, columns: part.shuffleAnswers, leaders: 1}}\">\n            <thead localise-data-jme-context-description=\"part.mcq.answers\">\n                <td/>\n                <xsl:for-each select=\"answers/answer\">\n                    <th><xsl:apply-templates select=\"content\"/></th>\n                </xsl:for-each>\n            </thead>\n            <tbody>\n                <xsl:for-each select=\"choices/choice\">\n                    <xsl:apply-templates select=\".\" mode=\"m_n_x\">\n                        <xsl:with-param name=\"displaytype\" select=\"$displaytype\"/>\n                    </xsl:apply-templates>\n                </xsl:for-each>\n            </tbody>\n        </table>\n    </form>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@type='m_n_x']\" mode=\"correctanswer\">\n    <xsl:variable name=\"displaytype\" select=\"choices/@displaytype\"/>\n    <div class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <form autocomplete=\"nope\">\n        <table class=\"choices-grid\" data-bind=\"reorder_table: {{rows: part.shuffleChoices, columns: part.shuffleAnswers, leaders: 1}}\">\n            <thead>\n                <td/>\n                <xsl:for-each select=\"answers/answer\">\n                    <th><xsl:apply-templates select=\"content\"/></th>\n                </xsl:for-each>\n            </thead>\n            <tbody>\n                <xsl:for-each select=\"choices/choice\">\n                    <xsl:apply-templates select=\".\" mode=\"m_n_x-correctanswer\">\n                        <xsl:with-param name=\"displaytype\" select=\"$displaytype\"/>\n                    </xsl:apply-templates>\n                </xsl:for-each>\n            </tbody>\n        </table>\n        </form>\n    </div>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"m_n_x\">\n    <xsl:param name=\"displaytype\"/>\n    <xsl:variable name=\"path\">\n        <xsl:apply-templates select=\"../..\" mode=\"path\"/>\n    </xsl:variable>\n    <xsl:variable name=\"answers\" select=\"../../answers\"/>\n    <xsl:variable name=\"choicenum\" select=\"count(preceding-sibling::choice)\"/>\n    <tr>\n        <td class=\"choice\"><xsl:apply-templates select=\"content\"/></td>\n        <xsl:for-each select=\"$answers/answer\">\n            <xsl:variable name=\"answernum\" select=\"count(preceding-sibling::answer)\"/>\n            <td class=\"option\">\n                <xsl:choose>\n                    <xsl:when test=\"$displaytype='checkbox'\">\n                        <xsl:attribute name=\"data-bind\">css: {checked: ticks[<xsl:value-of select=\"$answernum\"/>][<xsl:value-of select=\"$choicenum\"/>], correct: ticks[<xsl:value-of select=\"$answernum\"/>][<xsl:value-of select=\"$choicenum\"/>] &amp;&amp; correctTicks[<xsl:value-of select=\"$answernum\"/>][<xsl:value-of select=\"$choicenum\"/>]}</xsl:attribute>\n                        <input type=\"checkbox\" class=\"choice\" name=\"${path}-choice-{$choicenum}\" data-bind=\"checked: ticks[{$answernum}][{$choicenum}], disable: revealed, visible: layout[{$answernum}][{$choicenum}]\" />\n                    </xsl:when>\n                    <xsl:when test=\"$displaytype='radiogroup'\">\n                        <xsl:attribute name=\"data-bind\">css: {checked: ticks[<xsl:value-of select=\"$choicenum\"/>]()==<xsl:value-of select=\"$answernum\"/>, correct: ticks[<xsl:value-of select=\"$choicenum\"/>]()==<xsl:value-of select=\"$answernum\"/> &amp;&amp; correctTicks[<xsl:value-of select=\"$choicenum\"/>]==<xsl:value-of select=\"$answernum\"/>}</xsl:attribute>\n                        <input type=\"radio\" class=\"choice\" name=\"${path}-choice-{$choicenum}\" data-bind=\"checked: ticks[{$choicenum}], disable: revealed, visible: layout[{$answernum}][{$choicenum}]\" value=\"{$answernum}\"/>\n                    </xsl:when>\n                </xsl:choose>\n            </td>\n        </xsl:for-each>\n    </tr>\n</xsl:template>\n<xsl:template match=\"choice\" mode=\"m_n_x-correctanswer\">\n    <xsl:param name=\"displaytype\"/>\n    <xsl:variable name=\"path\">\n        <xsl:apply-templates select=\"../..\" mode=\"path\"/>\n    </xsl:variable>\n    <xsl:variable name=\"answers\" select=\"../../answers\"/>\n    <xsl:variable name=\"choicenum\" select=\"count(preceding-sibling::choice)\"/>\n    <tr>\n        <td class=\"choice\"><xsl:apply-templates select=\"content\"/></td>\n        <xsl:for-each select=\"$answers/answer\">\n            <xsl:variable name=\"answernum\" select=\"count(preceding-sibling::answer)\"/>\n            <td class=\"option\">\n                <xsl:choose>\n                    <xsl:when test=\"$displaytype='checkbox'\">\n                        <input type=\"checkbox\" class=\"choice\" name=\"{$path}-choice-{$choicenum}\" data-bind=\"checked: correctTicks[{$answernum}][{$choicenum}], visible: layout[{$answernum}][{$choicenum}], disable: true\" disabled=\"true\"/>\n                    </xsl:when>\n                    <xsl:when test=\"$displaytype='radiogroup'\">\n                        <input type=\"radio\" class=\"choice\" name=\"{$path}-choice-{$choicenum}\" data-bind=\"checked: correctTicks[{$choicenum}]+'', visible: layout[{$answernum}][{$choicenum}], disable: true\" disabled=\"true\" value=\"{$answernum}\"/>\n                    </xsl:when>\n                </xsl:choose>\n            </td>\n        </xsl:for-each>\n    </tr>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='patternmatch']\" mode=\"typespecific\">\n    <xsl:if test=\"count(steps/part)>0\"><localise>part.with steps answer prompt</localise></xsl:if>\n    <input type=\"text\" spellcheck=\"false\" class=\"patternmatch\" size=\"12.5\" data-bind=\"event: inputEvents, textInput: studentAnswer, autosize: true, disable: revealed\"></input>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@type='patternmatch']\" mode=\"correctanswer\">\n    <span class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <input type=\"text\" spellcheck=\"false\" disabled=\"true\" class=\"patternmatch\" data-bind=\"value: displayAnswer, autosize: true\"/>\n    </span>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='gapfill']\" mode=\"typespecific\">\n</xsl:template>\n<xsl:template match=\"part[@type='gapfill']\" mode=\"correctanswer\">\n</xsl:template>\n<xsl:template match=\"gapfill\" mode=\"content\">\n    <xsl:variable name=\"n\"><xsl:value-of select=\"@reference\"/></xsl:variable>\n    <xsl:apply-templates select=\"ancestor::part[1]/gaps/part[$n+1]\" />\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='jme']\" mode=\"typespecific\">\n    <xsl:if test=\"count(steps/part)>0\"><localise>part.with steps answer prompt</localise></xsl:if>\n    <input type=\"text\" spellcheck=\"false\" class=\"jme\" data-bind=\"event: inputEvents, textInput: studentAnswer, autosize: true, disable: revealed\"/>\n    <span class=\"jme-preview\" data-bind=\"visible: showPreview &amp;&amp; studentAnswerLaTeX(), maths: showPreview ? '\\\\displaystyle{{'+studentAnswerLaTeX()+'}}' : '', click: focusInput\"></span>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@type='jme']\" mode=\"correctanswer\">\n    <span class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <input type=\"text\" spellcheck=\"false\" disabled=\"true\" class=\"jme\" data-bind=\"value: correctAnswer, autosize: true\"/>\n        <span class=\"jme-preview\" data-bind=\"maths: '\\\\displaystyle{{'+correctAnswerLaTeX+'}}'\"></span>\n    </span>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='numberentry']\" mode=\"typespecific\">\n    <xsl:if test=\"count(steps/part)>0\"><localise>part.with steps answer prompt</localise></xsl:if>\n    <input type=\"text\" step=\"{answer/inputstep/@value}\" class=\"numberentry\" data-bind=\"event: inputEvents, textInput: studentAnswer, autosize: true, disable: revealed\"/>\n    <span class=\"preview\" data-bind=\"visible: showPreview &amp;&amp; studentAnswerLaTeX(), maths: showPreview ? studentAnswerLaTeX() : '', click: focusInput\"></span>\n    <span class=\"help-block hint precision-hint\" data-bind=\"visible: showPrecisionHint, html: precisionHint\"></span>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@type='numberentry']\" mode=\"correctanswer\">\n    <span class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <input type=\"text\" spellcheck=\"false\" disabled=\"true\" class=\"jme\" data-bind=\"value: correctAnswer, autosize: true\"/>\n        <span data-bind=\"\"></span>\n    </span>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='matrix']\" mode=\"typespecific\">\n    <xsl:if test=\"count(steps/part)>0\"><localise>part.with steps answer prompt</localise></xsl:if>\n    <span><matrix-input params=\"rows: studentAnswerRows, columns: studentAnswerColumns, value: studentAnswer, allowResize: allowResize, disable: revealed\" data-bind=\"event: inputEvents\"></matrix-input></span>\n    <span class=\"preview\" data-bind=\"visible: showPreview &amp;&amp; studentAnswerLaTeX(), maths: showPreview ? studentAnswerLaTeX() : ''\"></span>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@type='matrix']\" mode=\"correctanswer\">\n    <span class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <span data-bind=\"maths: correctAnswerLaTeX\"></span>\n    </span>\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='information']\" mode=\"typespecific\">\n</xsl:template>\n<xsl:template match=\"part[@type='information']\" mode=\"correctanswer\">\n</xsl:template>\n\n    \n<xsl:template match=\"part[@type='extension']\" mode=\"typespecific\">\n</xsl:template>\n<xsl:template match=\"part[@type='extension']\" mode=\"correctanswer\">\n</xsl:template>\n\n    \n<xsl:template match=\"part[@custom='true']\" mode=\"typespecific\">\n    <xsl:if test=\"count(steps/part)>0\"><localise>part.with steps answer prompt</localise></xsl:if>\n    <span data-bind=\"event: inputEvents, component: {{name: 'answer-widget', params: {{answer: studentAnswer, widget: input_widget, widget_options: input_options, part: part}}}}\"></span>\n    <span class=\"help-block hint\" data-bind=\"visible: input_options.hint, html: input_options.hint, typeset: input_options.hint\"></span>\n    <span class=\"feedback-icon\" data-bind=\"css: scoreFeedback.iconClass, attr: scoreFeedback.iconAttr\"></span>\n</xsl:template>\n<xsl:template match=\"part[@custom='true']\" mode=\"correctanswer\">\n    <span class=\"correct-answer\" data-bind=\"visibleIf: showCorrectAnswer, typeset: showCorrectAnswer\">\n        <localise>part.correct answer</localise>\n        <span data-bind=\"component: {{name: 'answer-widget', params: {{answer: correctAnswer, widget: input_widget, widget_options: input_options, part: $data, disable: true}}}}\"></span>\n    </span>\n</xsl:template>\n\n</xsl:stylesheet>"
        },

        examXML: "<exam name=\"Solving a homogenous 2nd-order ODE (distinct roots) (CUSTOM MARKING)\" percentPass=\"0%\"><settings><navigation allowregen=\"True\" browse=\"True\" preventleave=\"False\" reverse=\"True\" showfrontpage=\"False\" showresultspage=\"True\"><event action=\"none\" type=\"onleave\"><content><span>You have not finished the current question</span></content></event></navigation><timing allowPause=\"False\" duration=\"0\"><event action=\"none\" type=\"timeout\"><content><span /></content></event><event action=\"none\" type=\"timedwarning\"><content><span /></content></event></timing><feedback allowrevealanswer=\"True\" showactualmark=\"True\" showanswerstate=\"True\" showstudentname=\"True\" showtotalmark=\"True\"><intro><content><span /></content></intro><feedbackmessages /></feedback><rulesets /></settings><functions /><variables /><question_groups showQuestionGroupNames=\"False\"><question_group name=\"\" pickQuestions=\"0\" pickingStrategy=\"all-ordered\"><questions><question name=\"Solving a homogenous 2nd-order ODE (distinct roots) (CUSTOM MARKING)\"><statement><content><span><p>Find the general solution, $y(x)$, for the following ODE:</p>\n<p>$\\simplify{y''-{root1+root2}*y'+{root1*root2}*y}=0.$</p></span></content></statement><parts><part enableminimummarks=\"True\" marks=\"3.00000000000000\" minimummarks=\"0\" showcorrectanswer=\"True\" showfeedbackicon=\"True\" stepspenalty=\"0\" type=\"jme\"><prompt><content><span /></content></prompt><steps /><scripts /><adaptivemarking><variablereplacements strategy=\"originalfirst\" /></adaptivemarking><markingalgorithm extend=\"True\">cleanAnswer (Replaces e with exp):\n  replace(\"e^?;x\",\"exp(x)\",expression(studentAnswer))\n\nhasForm (Checks whether the result is in the right form):\n  length(match_regex(\"[a-zA-Z]+\\\\*exp\\\\(?.+\\\\)?\\\\s*\\\\+\\\\s*[a-zA-Z]+\\\\*exp\\\\(?.+\\\\)?\",string(cleanAnswer)))=1\n\ncr1 (Fixes problems with root being 1 or -1):\n  if (root1 = -1, \"-\", if (root1 = 1, \"\", root1))\n\ncr2 (Fixes problems with root being 1 or -1):\n  if (root2 = -1, \"-\", if (root1 = 2, \"\", root2))\n\ncontainsRoot1 (Check that the first root is contained):\n  not (length(match_regex(\"exp\\\\(\\\\(?\"+cr1+\"\\\\)?x\\\\)\",string(cleanAnswer)))=0)\n\ncontainsRoot2 (Check that the second root is contained):\n  not (length(match_regex(\"exp\\\\(\\\\(?\"+cr2+\"\\\\)?x\\\\)\",string(cleanAnswer)))=0)\n\nmark (Mark the thing):\n  set_credit(0,\"\");\n  if (containsRoot1 and containsRoot2, add_credit(2/3, \"Your roots are correct.\"), if (containsRoot1 or containsRoot2, add_credit(1/3, \"One of your roots is incorrect.\"), feedback(\"Your roots are incorrect.\")));\n  if (hasForm, add_credit(1/3,\"You have appropriate constants of integration.\"),feedback(\"You have forgotten one or more constants of integration.\"));\n  end()</markingalgorithm><answer checkvariablenames=\"False\" showPreview=\"True\"><correctanswer simplification=\"basic,unitFactor,unitPower,unitDenominator,zeroFactor,zeroTerm,zeroPower,collectNumbers,zeroBase,constantsFirst,sqrtProduct,sqrtDivision,sqrtSquare,otherNumbers\"><math>A*e^({root1}*x)+B*e^({root2}*x)</math></correctanswer><checking accuracy=\"0.001\" failurerate=\"1\" type=\"absdiff\"><range end=\"1\" points=\"5\" start=\"0\" /></checking><maxlength length=\"0\" partialcredit=\"0%\" showstrings=\"False\"><message><content><span>Your answer is too long.</span></content></message></maxlength><minlength length=\"0\" partialcredit=\"0%\" showstrings=\"False\"><message><content><span>Your answer is too short.</span></content></message></minlength><musthave partialcredit=\"0%\" showstrings=\"False\"><message><content><span>Your answer does not contain all required elements.</span></content></message></musthave><notallowed partialcredit=\"0%\" showstrings=\"False\"><message><content><span>Your answer contains elements which are not allowed.</span></content></message></notallowed><expectedvariablenames partialcredit=\"0%\" showstrings=\"False\"><message><content><span /></content></message></expectedvariablenames></answer></part></parts><advice><content><span><p>This is a constant coefficient, second-order ODE. We can use the auxilliary equation to find solutions.</p>\n<p>Suppose the differential equation is</p>\n<p>$y''+4y'-12y=0.$</p>\n<p>Then trying a solution of the form $y=e^{\\lambda x}$ gives</p>\n<p>$(\\lambda^{2}+4\\lambda-12)e^{\\lambda x}=0,$</p>\n<p>from which we can solve the auxilliary equation in $\\lambda$. Here, it factorises as $(\\lambda-2)(\\lambda+6)$, so we have roots $\\lambda=-6,\\,2$. Then the general solution is</p>\n<p>$y=A e^{-6 x}+B e^{2x},$</p>\n<p>where $A$ and $B$ are arbitrary constants.</p></span></content></advice><notes /><variables condition=\"\" maxRuns=\"100\"><variable name=\"root1\"><value>random(-5..5 except 0)</value></variable><variable name=\"root2\"><value>random(-5..5 except [0,root1])</value></variable></variables><functions /><preambles nosubvars=\"true\"><preamble language=\"css\" /><preamble language=\"js\" /></preambles><rulesets /></question></questions></question_group></question_groups></exam>"
    };
});
